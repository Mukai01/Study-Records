-- 1. コミットとロールバック------------------------------------------------------------
-- BEGIN から COMMIT が1つのトランザクションとして扱われる
-- COMMIT まで行けば変更が確定される
-- トランザクション中に異常が発生して中断した場合、それまでの仮の書き換えをなかったことにする
-- ⇒これをロールバックという
BEGIN;
-- 処理1:アーカイブテーブルへコピー
INSERT INTO 家計簿アーカイブ
SELECT * FROM 家計簿 WHERE 日付 <='2018-01-31'
-- 処理2:家計簿テーブルから削除
DELETE FROM 家計簿 WHERE 日付 <='2018-01-31'
COMMIT;

-- ロールバックはROLLBACK で明示的に発生させることも可能
-- データベースの多くは自動コミットモードとなっており、
-- 1つのSQL文が実行されるたびに、自動的にコミットが実行される
-- 自動コミットモードを解除する方法は環境によって違う


-- 2. トランザクションの分離-------------------------------------------------------------------
-- 同時実行により3種類の副作用がある
-- 1) ダーティリード：コミットされていない未確定の変更を他の人が読めてしまう
--    (ex)確定していない状態で、仮の残高をダーティリードし、そこから料金を引いてしまう

-- 2) 反復不能読み取り：SELECTとSELECTの間にほかの人がUPDATEしてしまい、検索結果が異なる
--    (ex)出金額の合計処理をする⇒出金額の最大値を集計する　
--    　　という2つの処理の間にUPDATEが起こると整合性が取れなくなる

-- 3) ファントムリード：SELECTとSELECTの間に他の人がINSERT文で行を追加してしまい、整合性が取れなくなる

-- これに対して、あるトランザクションを実行する際、ほかのトランザクションから影響を受けないよう分離して実行する
-- この制御を行うために、トランザクションの間ロックして、ほかの人を待たせる
-- しかし、ロックがたくさん発生すると、データベースの動作は遅くなってしまう
-- いろんなレベルがあるが、たいてい READ COMMITTED というダーティリードだけ防げる設定にする

SET TRANSACTION ISOLATION LEVEL READ COMMITED -- ダーティリードを防げる
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE -- 3つ全て防げる
